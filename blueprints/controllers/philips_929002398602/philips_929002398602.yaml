# Blueprint Metadata
blueprint:
  name: Controller - Philips 929002398602 Hue Dimmer switch v2
  description: |
    # Controller - Philips 929002398602 Hue Dimmer switch v2

    Controller automation for executing any kind of action triggered by the provided Philips 929002398602 Hue Dimmer switch v2.
    Allows to optionally loop an action on a button long press.
    The blueprint also adds support for virtual double button press events, which are not exposed by the controller device itself. However, It needs to be enabled in the blueprint.
    Supports Zigbee2MQTT, ZHA.

    Automations created with this blueprint can be connected with one or more [Hooks](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with lights, covers, media players, and potentially more.
    See the list of [Hooks available for this controller](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/philips_929002398602#available-hooks) for additional details.

    A small note, avoid using both custom actions and Hooks in the same blueprint, otherwise strange things may occur.

    ## More Info

    ℹ️ Version 2025.10.16
    📝 [Changelog](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/philips_929002398602/#changelog)
    📕 Full documentation regarding this blueprint is available [here](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/philips_929002398602).

    🚀 This blueprint is part of the **[Awesome HA Blueprints](https://yarafie.github.io/awesome-ha-blueprints) project**. Please consider **[leaving a star on GitHub](https://github.com/EPMatt/awesome-ha-blueprints)**! 🌟

  source_url: https://github.com/yarafie/awesome-ha-blueprints/blob/main/blueprints/controllers/philips_929002398602/philips_929002398602.yaml
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  # Device Selector
  input:
    controller_device:
      name: (ZHA, Zigbee2MQTT Required) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with deCONZ, ZHA, Zigbee2MQTT.
      default: ''
      selector:
        # source: https://zigbee.blakadder.com/Philips_RWL022.html
        device:
          filter:
            # source: https://www.zigbee2mqtt.io/devices/929002398602.html#philips-929002398602
            - integration: mqtt
              manufacturer: Philips
              model: Hue dimmer switch
            # For backwards compatibility with z2m 1.x. model_id is added to end of model rather than a seperate attribute in z2m 2.x
            - integration: mqtt
              manufacturer: Philips
              model: Hue dimmer switch (929002398602)
            # source: https://github.com/zigpy/zha-device-handlers/blob/dev/zhaquirks/
            - integration: zha
              manufacturer: Philips
              # **TBConfirmed** model:
            - integration: zha
              manufacturer: Signify Netherlands B.V.
              # **TBConfirmed** model:
            - integration: deconz
              manufacturer: Philips
              # **TBConfirmed** model:
            - integration: deconz
              manufacturer: Signify Netherlands B.V.
              # **TBConfirmed** model:
          multiple: false
    # inputs for custom actions
    action_button_on_short:
      name: (Optional) On button short press
      description: Action to run on short on button press.
      default: []
      selector:
        action:
    action_button_on_long:
      name: (Optional) On button long press
      description: Action to run on long on button press.
      default: []
      selector:
        action:
    action_button_on_release:
      name: (Optional) On button release
      description: Action to run on on button release after long press.
      default: []
      selector:
        action:
    action_button_on_double:
      name: (Optional) (Virtual) On button double press
      description: Action to run on double on button press.
      default: []
      selector:
        action:
    action_button_off_short:
      name: (Optional) Off button short press
      description: Action to run on short off button press.
      default: []
      selector:
        action:
    action_button_off_long:
      name: (Optional) Off button long press
      description: Action to run on long off button press.
      default: []
      selector:
        action:
    action_button_off_release:
      name: (Optional) Off button release
      description: Action to run on off button release after long press.
      default: []
      selector:
        action:
    action_button_off_double:
      name: (Optional) (Virtual) Off button double press
      description: Action to run on double off button press.
      default: []
      selector:
        action:
    action_button_up_short:
      name: (Optional) Up button short press
      description: Action to run on short up button press.
      default: []
      selector:
        action:
    action_button_up_long:
      name: (Optional) Up button long press
      description: Action to run on long up button press.
      default: []
      selector:
        action:
    action_button_up_release:
      name: (Optional) Up button release
      description: Action to run on up button release after long press.
      default: []
      selector:
        action:
    action_button_up_double:
      name: (Optional) (Virtual) Up button double press
      description: Action to run on double up button press.
      default: []
      selector:
        action:
    action_button_down_short:
      name: (Optional) Down button short press
      description: Action to run on short down button press.
      default: []
      selector:
        action:
    action_button_down_long:
      name: (Optional) Down button long press
      description: Action to run on long down button press.
      default: []
      selector:
        action:
    action_button_down_release:
      name: (Optional) Down button release
      description: Action to run on down button release after long press.
      default: []
      selector:
        action:
    action_button_down_double:
      name: (Optional) (Virtual) Down button double press
      description: Action to run on double down button press.
      default: []
      selector:
        action:
    # inputs for looping custom actions on long button press events until the corresponding release event is received
    long_press_options_section:
      name: Long Press options
      icon: mdi:remote
      collapsed: true
      input:
        button_on_long_loop:
          name: (Optional) On button long press - loop until release
          description: Loop the on button action until the button is released.
          default: false
          selector:
            boolean:
        button_on_long_max_loop_repeats:
          name: (Optional) On button long press - Maximum loop repeats
          description: >-
            Maximum number of repeats for the custom action, when looping is enabled.
            Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
          default: 20
          selector:
            number:
              min: 1.0
              max: 1000.0
              mode: slider
              step: 1.0
        button_off_long_loop:
          name: (Optional) Off button long press - loop until release
          description: Loop the off button action until the button is released.
          default: false
          selector:
            boolean:
        button_off_long_max_loop_repeats:
          name: (Optional) Off button long press - Maximum loop repeats
          description: >-
            Maximum number of repeats for the custom action, when looping is enabled.
            Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
          default: 20
          selector:
            number:
              min: 1.0
              max: 1000.0
              mode: slider
              step: 1.0
        button_up_long_loop:
          name: (Optional) Up button long press - loop until release
          description: Loop the up button action until the button is released.
          default: false
          selector:
            boolean:
        button_up_long_max_loop_repeats:
          name: (Optional) Up button long press - Maximum loop repeats
          description: >-
            Maximum number of repeats for the custom action, when looping is enabled.
            Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
          default: 20
          selector:
            number:
              min: 1.0
              max: 1000.0
              mode: slider
              step: 1.0
        button_down_long_loop:
          name: (Optional) Down button long press - loop until release
          description: Loop the down button action until the button is released.
          default: false
          selector:
            boolean:
        button_down_long_max_loop_repeats:
          name: (Optional) Down button long press - Maximum loop repeats
          description: >-
            Maximum number of repeats for the custom action, when looping is enabled.
            Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
          default: 20
          selector:
            number:
              min: 1.0
              max: 1000.0
              mode: slider
              step: 1.0
        helper_long_press_delay:
          name: (Optional) Helper - Long Press delay
          description: Max delay between the pushing and releasing of a button long press event. Increase this value if you notice that the long press action is not triggered properly.
          default: 250
          selector:
            number:
              min: 100.0
              max: 5000.0
              unit_of_measurement: milliseconds
              mode: box
              step: 10.0
    # inputs for enabling double press events
    double_press_options_section:
      name: Double Press options
      icon: mdi:remote
      collapsed: true
      input:
        button_on_double_press_exposed:
          name: (Optional) Expose on button double press event
          description: Choose whether or not to expose the virtual double press event for the on button. Turn this on if you are providing an action for the on button double press event.
          default: false
          selector:
            boolean:
        button_off_double_press_exposed:
          name: (Optional) Expose off button double press event
          description: Choose whether or not to expose the virtual double press event for the off button. Turn this on if you are providing an action for the off button double press event.
          default: false
          selector:
            boolean:
        button_up_double_press_exposed:
          name: (Optional) Expose up button double press event
          description: Choose whether or not to expose the virtual double press event for the up button. Turn this on if you are providing an action for the up button double press event.
          default: false
          selector:
            boolean:
        button_down_double_press_exposed:
          name: (Optional) Expose down button double press event
          description: Choose whether or not to expose the virtual double press event for the down button. Turn this on if you are providing an action for the down button double press event.
          default: false
          selector:
            boolean:
        # helper used to properly adjust the remote button double press events
        helper_double_press_delay:
          name: (Optional) Helper - Double Press delay
          description: Max delay between the first and the second button press for the double press event. Provide a value only if you are using a double press action. Increase this value if you notice that the double press action is not triggered properly.
          default: 250
          selector:
            number:
              min: 100.0
              max: 5000.0
              unit_of_measurement: milliseconds
              mode: box
              step: 10.0
#
# Automation schema
variables:
  # Controller ID
  controller_id: !input controller_device
  # integration id used to select items in the action mapping
  # integration type is set from trigger.id
  integration_id: '{{ trigger.id.split("-")[0] }}'
  # convert input tags to variables, to be used in templates
  button_on_long_loop: !input button_on_long_loop
  button_on_long_max_loop_repeats: !input button_on_long_max_loop_repeats
  button_on_double_press_exposed: !input button_on_double_press_exposed
  button_off_long_loop: !input button_off_long_loop
  button_off_long_max_loop_repeats: !input button_off_long_max_loop_repeats
  button_off_double_press_exposed: !input button_off_double_press_exposed
  button_up_long_loop: !input button_up_long_loop
  button_up_long_max_loop_repeats: !input button_up_long_max_loop_repeats
  button_up_double_press_exposed: !input button_up_double_press_exposed
  button_down_long_loop: !input button_down_long_loop
  button_down_long_max_loop_repeats: !input button_down_long_max_loop_repeats
  button_down_double_press_exposed: !input button_down_double_press_exposed
  helper_long_press_delay: !input helper_long_press_delay
  helper_double_press_delay: !input helper_double_press_delay
  # mapping between actions and integrations
  actions_mapping:
    z2m:
      # source: https://www.zigbee2mqtt.io/devices/929002398602.html#philips-929002398602
      button_on_short: [on_press_release]
      button_on_long: [on_hold]
      button_on_release: [on_hold_release]
      button_off_short: [off_press_release]
      button_off_long: [off_hold]
      button_off_release: [off_hold_release]
      button_up_short: [up_press_release]
      button_up_long: [up_hold]
      button_up_release: [up_hold_release]
      button_down_short: [down_press_release]
      button_down_long: [down_hold]
      button_down_release: [down_hold_release]
    zha:
      # source: https://github.com/zigpy/zha-device-handlers/blob/dev/zhaquirks/
      button_on_short: [on_press_release]
      button_on_long: [on_hold]
      button_on_release: [on_long_release]
      button_off_short: [off_press_release]
      button_off_long: [off_hold]
      button_off_release: [off_long_release]
      button_up_short: [up_press_release]
      button_up_long: [up_hold]
      button_up_release: [up_long_release]
      button_down_short: [down_press_release]
      button_down_long: [down_hold]
      button_down_release: [down_long_release]
  # pre-choose actions for buttons based on configured integration
  # mainly used to pass to hooks through ahb_controller_event
  button_on_short: '{{ actions_mapping[integration_id]["button_on_short"] }}'
  button_on_long: '{{ actions_mapping[integration_id]["button_on_long"] }}'
  button_on_release: '{{ actions_mapping[integration_id]["button_on_release"] }}'
  button_off_short: '{{ actions_mapping[integration_id]["button_off_short"] }}'
  button_off_long: '{{ actions_mapping[integration_id]["button_off_long"] }}'
  button_off_release: '{{ actions_mapping[integration_id]["button_off_release"] }}'
  button_up_short: '{{ actions_mapping[integration_id]["button_up_short"] }}'
  button_up_long: '{{ actions_mapping[integration_id]["button_up_long"] }}'
  button_up_release: '{{ actions_mapping[integration_id]["button_up_release"] }}'
  button_down_short: '{{ actions_mapping[integration_id]["button_down_short"] }}'
  button_down_long: '{{ actions_mapping[integration_id]["button_down_long"] }}'
  button_down_release: '{{ actions_mapping[integration_id]["button_down_release"] }}'
#
# Mode Block
mode: single
max_exceeded: silent
#
# Triggers Block
triggers:
  # triggers for zigbee2mqtt
  - trigger: device
    id: z2m-button-on-short
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: on_press_release
  - trigger: device
    id: z2m-button-on-long
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: on_hold
  - trigger: device
    id: z2m-button-on-release
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: on_hold_release
  - trigger: device
    id: z2m-button-off-short
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: off_press_release
  - trigger: device
    id: z2m-button-off-long
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: off_hold
  - trigger: device
    id: z2m-button-off-release
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: off_hold_release
  - trigger: device
    id: z2m-button-up-short
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: up_press_release
  - trigger: device
    id: z2m-button-up-long
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: up_hold
  - trigger: device
    id: z2m-button-up-release
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: up_hold_release
  - trigger: device
    id: z2m-button-down-short
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: down_press_release
  - trigger: device
    id: z2m-button-down-long
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: down_hold
  - trigger: device
    id: z2m-button-down-release
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: down_hold_release
  # triggers for ZHA
  - trigger: event
    id: zha-button-on-short
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: on_press_release
  - trigger: event
    id: zha-button-on-long
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: on_hold
  - trigger: event
    id: zha-button-on-release
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: on_long_release
  - trigger: event
    id: zha-button-off-short
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: off_press_release
  - trigger: event
    id: zha-button-off-long
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: off_hold
  - trigger: event
    id: zha-button-off-release
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: off_long_release
  - trigger: event
    id: zha-button-up-short
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: up_press_release
  - trigger: event
    id: zha-button-up-long
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: up_hold
  - trigger: event
    id: zha-button-up-release
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: up_long_release
  - trigger: event
    id: zha-button-down-short
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: down_press_release
  - trigger: event
    id: zha-button-down-long
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: down_hold
  - trigger: event
    id: zha-button-down-release
    event_type: zha_event
    event_data:
      device_id: !input controller_device
      command: down_long_release
#
# Conditions Block
conditions:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "z2m" -%}
        {{ trigger.payload }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None","unknown"] }}
#
# Actions Block
actions:
  #
  # choose the sequence to run based on the received button event
  - choose:
      #
      # Actions for On Button Single Press / Double Press Virtual
      - conditions:
          - condition: trigger
            id:
              - z2m-button-on-short
              - zha-button-on-short
        sequence:
          - if:
              - condition: template
                value_template: '{{ button_on_double_press_exposed }}'
            # Handle On Double Press Event
            then:
              - choose:
                  # wait for z2m/zha triggers for double press
                  - conditions: []
                    sequence:
                      - wait_for_trigger:
                          # z2m trigger
                          - trigger: device
                            domain: mqtt
                            device_id: !input controller_device
                            type: action
                            subtype: on_press_release
                          # zha trigger
                          - trigger: event
                            event_type: zha_event
                            event_data:
                              device_id: !input controller_device
                              command: on_press_release
                        timeout:
                          milliseconds: '{{ helper_double_press_delay }}'
                        continue_on_timeout: true
                      - if:
                          - condition: template
                            value_template: '{{ wait.trigger.idx is defined }}'
                        then:
                          # fire the ahb hook event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_on_double
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_on_double
                        else:
                          # fire the ahb hook event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_on_short
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_on_short
            # Not On Double Handle On Single Press Event
            else:
              # fire the ahb hook event
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_on_short
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_on_short
      #
      # Actions for On Button Long Press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-on-long
              - zha-button-on-long
        sequence:
          # fire the ahb event only once, the ahb hook will take care of looping
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_on_long
          # run the custom action only once before entering repeat
          - choose:
              - conditions: []
                sequence: !input action_button_on_long
          # handle custom action looping if looping is enabled
          - choose:
              - conditions: '{{ button_on_long_loop }}'
                sequence:
                  - repeat:
                      count: !input button_on_long_max_loop_repeats
                      sequence:
                        - parallel:
                            - sequence: !input action_button_on_long
                            - sequence:
                                - choose:
                                    - conditions: []
                                      sequence:
                                        - wait_for_trigger:
                                            # z2m triggers
                                            - trigger: device
                                              domain: mqtt
                                              device_id: !input controller_device
                                              type: action
                                              subtype: on_hold_release
                                            # zha triggers
                                            - trigger: event
                                              event_type: zha_event
                                              event_data:
                                                device_id: !input controller_device
                                                command: on_long_release
                                          timeout:
                                            milliseconds: !input helper_long_press_delay
                                          continue_on_timeout: true
                                        - if:
                                            - condition: template
                                              value_template: '{{ wait.trigger.idx is defined }}'
                                          then:
                                            - stop: button released
      #
      # Actions for On Button long press released
      - conditions:
          - condition: trigger
            id:
              - z2m-button-on-release
              - zha-button-on-release
        sequence:
          # fire the ahb hook event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_on_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_on_release
      #
      # Actions for Off Button Single Press / Double Press Virtual
      - conditions:
          - condition: trigger
            id:
              - z2m-button-off-short
              - zha-button-off-short
        sequence:
          - if:
              - condition: template
                value_template: '{{ button_off_double_press_exposed }}'
            # Handle Off Double Press Event
            then:
              - choose:
                  # wait for z2m/zha triggers for double press
                  - conditions: []
                    sequence:
                      - wait_for_trigger:
                          # z2m trigger
                          - trigger: device
                            domain: mqtt
                            device_id: !input controller_device
                            type: action
                            subtype: off_press_release
                          # zha trigger
                          - trigger: event
                            event_type: zha_event
                            event_data:
                              device_id: !input controller_device
                              command: off_press_release
                        timeout:
                          milliseconds: '{{ helper_double_press_delay }}'
                        continue_on_timeout: true
                      - if:
                          - condition: template
                            value_template: '{{ wait.trigger.idx is defined }}'
                        then:
                          # fire the ahb hook event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_off_double
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_off_double
                        else:
                          # fire the ahb hook event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_off_short
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_off_short
            # Not Off Double Handle Off Single Press Event
            else:
              # fire the ahb hook event
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_off_short
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_off_short
      #
      # Actions for Off Button Long Press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-off-long
              - zha-button-off-long
        sequence:
          # fire the ahb event only once, the ahb hook will take care of looping
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_off_long
          # run the custom action only once before entering repeat
          - choose:
              - conditions: []
                sequence: !input action_button_off_long
          # handle custom action looping if looping is enabled
          - choose:
              - conditions: '{{ button_off_long_loop }}'
                sequence:
                  - repeat:
                      count: !input button_off_long_max_loop_repeats
                      sequence:
                        - parallel:
                            - sequence: !input action_button_off_long
                            - sequence:
                                - choose:
                                    - conditions: []
                                      sequence:
                                        - wait_for_trigger:
                                            # z2m triggers
                                            - trigger: device
                                              domain: mqtt
                                              device_id: !input controller_device
                                              type: action
                                              subtype: off_hold_release
                                            # zha triggers
                                            - trigger: event
                                              event_type: zha_event
                                              event_data:
                                                device_id: !input controller_device
                                                command: off_long_release
                                          timeout:
                                            milliseconds: !input helper_long_press_delay
                                          continue_on_timeout: true
                                        - if:
                                            - condition: template
                                              value_template: '{{ wait.trigger.idx is defined }}'
                                          then:
                                            - stop: button released
      #
      # Actions for Off Button long press released
      - conditions:
          - condition: trigger
            id:
              - z2m-button-off-release
              - zha-button-off-release
        sequence:
          # fire the ahb hook event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_off_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_off_release
      #
      # Actions for Up Button Single Press / Double Press Virtual
      - conditions:
          - condition: trigger
            id:
              - z2m-button-up-short
              - zha-button-up-short
        sequence:
          - if:
              - condition: template
                value_template: '{{ button_up_double_press_exposed }}'
            # Handle Up Double Press Event
            then:
              - choose:
                  # wait for z2m/zha triggers for double press
                  - conditions: []
                    sequence:
                      - wait_for_trigger:
                          # z2m trigger
                          - trigger: device
                            domain: mqtt
                            device_id: !input controller_device
                            type: action
                            subtype: up_press_release
                          # zha trigger
                          - trigger: event
                            event_type: zha_event
                            event_data:
                              device_id: !input controller_device
                              command: up_press_release
                        timeout:
                          milliseconds: '{{ helper_double_press_delay }}'
                        continue_on_timeout: true
                      - if:
                          - condition: template
                            value_template: '{{ wait.trigger.idx is defined }}'
                        then:
                          # fire the ahb hook event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_up_double
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_up_double
                        else:
                          # fire the ahb hook event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_up_short
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_up_short
            # Not Up Double Handle Up Single Press Event
            else:
              # fire the ahb hook event
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_up_short
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_up_short
      #
      # Actions for Up Button Long Press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-up-long
              - zha-button-up-long
        sequence:
          # fire the ahb event only once, the ahb hook will take care of looping
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_up_long
          # run the custom action only once before entering repeat
          - choose:
              - conditions: []
                sequence: !input action_button_up_long
          # handle custom action looping if looping is enabled
          - choose:
              - conditions: '{{ button_up_long_loop }}'
                sequence:
                  - repeat:
                      count: !input button_up_long_max_loop_repeats
                      sequence:
                        - parallel:
                            - sequence: !input action_button_up_long
                            - sequence:
                                - choose:
                                    - conditions: []
                                      sequence:
                                        - wait_for_trigger:
                                            # z2m triggers
                                            - trigger: device
                                              domain: mqtt
                                              device_id: !input controller_device
                                              type: action
                                              subtype: up_hold_release
                                            # zha triggers
                                            - trigger: event
                                              event_type: zha_event
                                              event_data:
                                                device_id: !input controller_device
                                                command: up_long_release
                                          timeout:
                                            milliseconds: !input helper_long_press_delay
                                          continue_on_timeout: true
                                        - if:
                                            - condition: template
                                              value_template: '{{ wait.trigger.idx is defined }}'
                                          then:
                                            - stop: button released
      #
      # Actions for Up Button long press released
      - conditions:
          - condition: trigger
            id:
              - z2m-button-up-release
              - zha-button-up-release
        sequence:
          # fire the ahb hook event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_up_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_up_release
      #
      # Actions for Down Button Single Press / Double Press Virtual
      - conditions:
          - condition: trigger
            id:
              - z2m-button-down-short
              - zha-button-down-short
        sequence:
          - if:
              - condition: template
                value_template: '{{ button_down_double_press_exposed }}'
            # Handle Down Double Press Event
            then:
              - choose:
                  # wait for z2m/zha triggers for double press
                  - conditions: []
                    sequence:
                      - wait_for_trigger:
                          # z2m trigger
                          - trigger: device
                            domain: mqtt
                            device_id: !input controller_device
                            type: action
                            subtype: down_press_release
                          # zha trigger
                          - trigger: event
                            event_type: zha_event
                            event_data:
                              device_id: !input controller_device
                              command: down_press_release
                        timeout:
                          milliseconds: '{{ helper_double_press_delay }}'
                        continue_on_timeout: true
                      - if:
                          - condition: template
                            value_template: '{{ wait.trigger.idx is defined }}'
                        then:
                          # fire the ahb hook event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_down_double
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_down_double
                        else:
                          # fire the ahb hook event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_down_short
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_down_short
            # Not Down Double Handle Down Single Press Event
            else:
              # fire the ahb hook event
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_down_short
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_down_short
      #
      # Actions for Down Button Long Press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-down-long
              - zha-button-down-long
        sequence:
          # fire the ahb event only once, the ahb hook will take care of looping
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_down_long
          # run the custom action only once before entering repeat
          - choose:
              - conditions: []
                sequence: !input action_button_down_long
          # handle custom action looping if looping is enabled
          - choose:
              - conditions: '{{ button_down_long_loop }}'
                sequence:
                  - repeat:
                      count: !input button_down_long_max_loop_repeats
                      sequence:
                        - parallel:
                            - sequence: !input action_button_down_long
                            - sequence:
                                - choose:
                                    - conditions: []
                                      sequence:
                                        - wait_for_trigger:
                                            # z2m triggers
                                            - trigger: device
                                              domain: mqtt
                                              device_id: !input controller_device
                                              type: action
                                              subtype: down_hold_release
                                            # zha triggers
                                            - trigger: event
                                              event_type: zha_event
                                              event_data:
                                                device_id: !input controller_device
                                                command: down_long_release
                                          timeout:
                                            milliseconds: !input helper_long_press_delay
                                          continue_on_timeout: true
                                        - if:
                                            - condition: template
                                              value_template: '{{ wait.trigger.idx is defined }}'
                                          then:
                                            - stop: button released
      #
      # Actions for Down Button long press released
      - conditions:
          - condition: trigger
            id:
              - z2m-button-down-release
              - zha-button-down-release
        sequence:
          # fire the ahb hook event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_down_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_down_release
