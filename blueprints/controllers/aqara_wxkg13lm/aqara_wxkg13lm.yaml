# Blueprint metadata
blueprint:
  name: Controller - Aqara WXKG13LM Wireless Mini Switch T1
  description: |
    # Controller - Aqara WXKG13LM Wireless Mini Switch T1

    Controller automation for executing any kind of action triggered by the provided Aqara WXKG13LM Wireless Mini Switch T1.
    Allows to optionally loop an action on a button long press.
    Supports Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.
    See the list of [Hooks available for this controller](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/aqara_wxkg13lm#available-hooks) for additional details.

    ## More Info

    ℹ️ Version 2025.04.12
    📝 [Changelog](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/aqara_wxkg13lm/#changelog)
    📕 Full documentation regarding this blueprint is available [here](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/aqara_wxkg13lm).

    🚀 This blueprint is part of the **[Awesome HA Blueprints](https://yarafie.github.io/awesome-ha-blueprints) project**. Please consider **[leaving a star on GitHub](https://github.com/EPMatt/awesome-ha-blueprints)**! 🌟

  source_url: https://github.com/yarafie/awesome-ha-blueprints/blob/main/blueprints/controllers/aqara_wxkg13lm/aqara_wxkg13lm.yaml
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  # Device Selector
  input:
    controller_device:
      name: (Required) (Zigbee2MQTT) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with deCONZ, ZHA, Zigbee2MQTT.
      default: ''
      selector:
        # source: https://zigbee.blakadder.com/Aqara_WXKG13LM.html
        device:
          filter:
            # source: https://www.zigbee2mqtt.io/devices/WXKG13LM.html
            - integration: mqtt
              manufacturer: Aqara
              model: Wireless mini switch T1
            # For backwards compatability with z2m 1.x. model_id is added to end of model rather than a seperate attribute in z2m 2.x
            - integration: mqtt
              manufacturer: Aqara
              model: Wireless mini switch T1 (WXKG13LM)
          multiple: false
    # inputs for custom actions
    action_button_short:
      name: (Optional) Button short press
      description: Action to run on short button press.
      default: []
      selector:
        action:
    action_button_long:
      name: (Optional) Button long press
      description: Action to run on long button press.
      default: []
      selector:
        action:
    action_button_release:
      name: (Optional) Button release
      description: Action to run on button release after long press.
      default: []
      selector:
        action:
    action_button_double:
      name: (Optional) Button double press
      description: Action to run on double button press.
      default: []
      selector:
        action:
    action_button_triple:
      name: (Optional) Button triple press
      description: Action to run on triple button press.
      default: []
      selector:
        action:
    action_button_quadruple:
      name: (Optional) Button quadruple press
      description: Action to run on quadruple button press.
      default: []
      selector:
        action:
    action_button_quintuple:
      name: (Optional) Button quintuple press
      description: Action to run on quintuple button press.
      default: []
      selector:
        action:
    action_button_many:
      name: (Optional) Button many press
      description: Action to run on many button press.
      default: []
      selector:
        action:
    # inputs for looping custom actions on long button press events until the corresponding release event is received
    long_press_options_section:
      name: Long Press options
      icon: mdi:remote
      collapsed: true
      input:
        button_long_loop:
          name: (Optional) Button button long press - loop until release
          description: Loop the button button action until the button is released.
          default: false
          selector:
            boolean:
        button_long_max_loop_repeats:
          name: (Optional) Button button long press - Maximum loop repeats
          description: >-
            Maximum number of repeats for the custom action, when looping is enabled.
            Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
          default: 20
          selector:
            number:
              min: 1.0
              max: 1000.0
              mode: slider
              step: 1.0
        helper_long_press_delay:
          name: (Optional) Helper - Long Press delay
          description: Max delay between the pushing and releasing of a button long press event. Increase this value if you notice that the long press action is not triggered properly.
          default: 250
          selector:
            number:
              min: 100.0
              max: 5000.0
              unit_of_measurement: milliseconds
              mode: box
              step: 10.0
#
# Automation schema
variables:
  # Controller ID
  controller_id: !input controller_device
  # integration id used to select items in the action mapping
  # integration type is set from trigger.id
  integration_id: '{{ trigger.id.split("-")[0] }}'
  # convert input tags to variables, to be used in templates
  button_long_loop: !input button_long_loop
  button_long_max_loop_repeats: !input button_long_max_loop_repeats
  helper_long_press_delay: !input helper_long_press_delay
  # mapping between actions and integrations
  actions_mapping:
    z2m:
      # source: https://www.zigbee2mqtt.io/devices/WXKG13LM.html
      button_short: [single]
      button_long: [hold]
      button_release: [release]
      button_double: [double]
      button_triple: [triple]
      button_quadruple: [quadruple]
      button_quintuple: [quintuple]
      button_many: [many]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_short: '{{ actions_mapping[integration_id]["button_short"] }}'
  button_long: '{{ actions_mapping[integration_id]["button_long"] }}'
  button_release: '{{ actions_mapping[integration_id]["button_release"] }}'
  button_double: '{{ actions_mapping[integration_id]["button_double"] }}'
  button_triple: '{{ actions_mapping[integration_id]["button_triple"] }}'
  button_quadruple: '{{ actions_mapping[integration_id]["button_quadruple"] }}'
  button_quintuple: '{{ actions_mapping[integration_id]["button_quintuple"] }}'
  button_many: '{{ actions_mapping[integration_id]["button_many"] }}'
#
# Mode Block
mode: single
max_exceeded: silent
#
# Triggers Block
triggers:
  # triggers for zigbee2mqtt mqtt device action
  - trigger: device
    id: z2m-button-short
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: single
  - trigger: device
    id: z2m-button-long
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: hold
  - trigger: device
    id: z2m-button-release
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: release
  - trigger: device
    id: z2m-button-double
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: double
  - trigger: device
    id: z2m-button-triple
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: triple
  - trigger: device
    id: z2m-button-quadruple
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: quadruple
  - trigger: device
    id: z2m-button-quintuple
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: quintuple
  - trigger: device
    id: z2m-button-many
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: many
#
# Conditions Block
conditions:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "z2m" -%}
        {{ trigger.payload }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None","unknown"] }}
#
# Actions Block
actions:
  #
  # choose the sequence to run based on the received button event
  - choose:
      #
      # Actions for Button single press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-short
        sequence:
          # fire the ahb hook event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_short
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_short
      #
      # Actions for Button Long Press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-long
        sequence:
          # fire the ahb event only once, the ahb hook will take care of looping
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_long
          # run the custom action only once before entering repeat
          - choose:
              - conditions: []
                sequence: !input action_button_long
          # handle custom action looping if looping is enabled
          - choose:
              - conditions: '{{ button_long_loop }}'
                sequence:
                  # Repeat the Long Press Actions for the set number of loops
                  - repeat:
                      count: !input button_long_max_loop_repeats
                      sequence:
                        - parallel:
                            - sequence: !input action_button_long
                            - sequence:
                                - choose:
                                    - conditions: []
                                      sequence:
                                        # Wait for z2m triggers for Button Long Press Release to stop looping
                                        - wait_for_trigger:
                                            # z2m triggers
                                            - trigger: device
                                              domain: mqtt
                                              device_id: !input controller_device
                                              type: action
                                              subtype: release
                                          timeout:
                                            milliseconds: !input helper_long_press_delay
                                          continue_on_timeout: true
                                        # If a Button Long Release is triggered wait.trigger.idx will be defined stop the loop before long_max_loop_repeats
                                        - if:
                                            - condition: template
                                              value_template: '{{ wait.trigger.idx is defined }}'
                                          then:
                                            # fire the event
                                            - event: ahb_controller_event
                                              event_data:
                                                controller: '{{ controller_id }}'
                                                action: button_release
                                            # run the custom action
                                            - choose:
                                                - conditions: []
                                                  sequence: !input action_button_release
                                            # Stop the repeat loop
                                            - stop: button_released
      #
      # Actions for Button Long Release
      - conditions:
          - condition: trigger
            id:
              - z2m-button-release
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_release
      #
      # Actions for Button Double Press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-double
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_double
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_double
      #
      # Actions for Button Triple Press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-triple
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_triple
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_triple
      #
      # Actions for Button Quadruple Press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-quadruple
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_quadruple
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_quadruple
      #
      # Actions for Button Quintuple Press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-quintuple
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_quintuple
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_quintuple
      #
      # Actions for Button Many Press
      - conditions:
          - condition: trigger
            id:
              - z2m-button-many
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_many
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_many
