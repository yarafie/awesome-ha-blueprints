"use strict";(self.webpackChunkawesome_ha_blueprints_website=self.webpackChunkawesome_ha_blueprints_website||[]).push([[2304],{8680:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"blueprints/controllers/ikea_e1766","title":"Controller - IKEA E1766 TR\xc5DFRI Open/Close Remote","description":"Controller automation for executing any kind of action triggered by the provided IKEA E1766 TR\xc5DFRI Open/Close Remote. Supports Zigbee2MQTT, ZHA, deCONZ.","source":"@site/docs/blueprints/controllers/ikea_e1766.mdx","sourceDirName":"blueprints/controllers","slug":"/blueprints/controllers/ikea_e1766","permalink":"/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1766","draft":false,"unlisted":false,"editUrl":"https://github.com/yarafie/awesome-ha-blueprints/edit/main/docs/blueprints/controllers/ikea_e1766.mdx","tags":[],"version":"current","frontMatter":{"title":"Controller - IKEA E1766 TR\xc5DFRI Open/Close Remote","description":"Controller automation for executing any kind of action triggered by the provided IKEA E1766 TR\xc5DFRI Open/Close Remote. Supports Zigbee2MQTT, ZHA, deCONZ."}}');var r=t(7557),s=t(7389),i=t(5561);const l={title:"Controller - IKEA E1766 TR\xc5DFRI Open/Close Remote",description:"Controller automation for executing any kind of action triggered by the provided IKEA E1766 TR\xc5DFRI Open/Close Remote. Supports Zigbee2MQTT, ZHA, deCONZ."},a=void 0,d={},c=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Available Hooks",id:"available-hooks",level:2},{value:"Light",id:"light",level:3},{value:"Default Mapping",id:"default-mapping",level:4},{value:"Mapping #2",id:"mapping-2",level:4},{value:"Media Player",id:"media-player",level:3},{value:"Default Mapping",id:"default-mapping-1",level:4},{value:"Cover",id:"cover",level:3},{value:"Default Mapping",id:"default-mapping-2",level:4},{value:"Additional Notes",id:"additional-notes",level:2},{value:"Helper - Last Controller Event",id:"helper---last-controller-event",level:3},{value:"Virtual double press events",id:"virtual-double-press-events",level:3},{value:"Hooks support and missing long press events",id:"hooks-support-and-missing-long-press-events",level:3},{value:"Changelog",id:"changelog",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i._x,{id:"ikea_e1766",category:"controllers"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["This blueprint is part of the ",(0,r.jsx)(n.strong,{children:"Controllers-Hooks Ecosystem"}),". You can read more about this topic ",(0,r.jsx)(n.a,{href:"/docs/controllers-hooks-ecosystem",children:"here"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"This blueprint provides universal support for running any custom action when a button is pressed on the provided IKEA E1766 TR\xc5DFRI Open/Close Remote. Supports controllers integrated with Zigbee2MQTT, ZHA, deCONZ. Just specify the integration used to connect the remote to Home Assistant when setting up the automation, and the blueprint will take care of all the rest."}),"\n",(0,r.jsx)(n.p,{children:"The blueprint also adds support for virtual double button press events, which are not exposed by the controller itself."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Automations created with this blueprint can be connected with one or more ",(0,r.jsx)(n.a,{href:"/docs/blueprints/hooks",children:"Hooks"})," supported by this controller.\nHooks allow to easily create controller-based automations for interacting with media players, lights, covers and more. See the list of ",(0,r.jsx)(n.a,{href:"/docs/blueprints/controllers/ikea_e1766#available-hooks",children:"Hooks available for this controller"})," for additional details."]})}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsx)(i.Kg,{id:"zigbee2mqtt"}),"\n",(0,r.jsx)(i.Kg,{id:"zha"}),"\n",(0,r.jsx)(i.Kg,{id:"deconz"}),"\n",(0,r.jsxs)(i.Kg,{name:"Input Text Integration",required:!0,children:[(0,r.jsxs)(n.p,{children:["This integration provides the entity which must be provided to the blueprint in the ",(0,r.jsx)(n.strong,{children:"Helper - Last Controller Event"})," input. Learn more about this helper by reading the dedicated section in the ",(0,r.jsx)(n.a,{href:"#helper---last-controller-event",children:"Additional Notes"}),"."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.home-assistant.io/integrations/input_text/",children:"Input Text Integration Docs"})})]}),"\n",(0,r.jsx)(n.h2,{id:"inputs",children:"Inputs"}),"\n",(0,r.jsx)(i.G0,{category:"controllers",id:"ikea_e1766"}),"\n",(0,r.jsx)(n.h2,{id:"available-hooks",children:"Available Hooks"}),"\n",(0,r.jsx)(n.admonition,{title:"Virtual double press actions",type:"note",children:(0,r.jsx)(n.p,{children:"Some of the following mappings might include actions for virtual double press events, which are disabled by default.\nIf you are using a hook mapping which provides an action for a virtual double press event, please make sure to enable support for virtual double press on the corresponding buttons with the corresponding blueprint input."})}),"\n",(0,r.jsx)(n.h3,{id:"light",children:"Light"}),"\n",(0,r.jsx)(n.p,{children:"This Hook blueprint allows to build a controller-based automation to control a light. Supports brightness and color control both for white temperature and rgb lights."}),"\n",(0,r.jsx)(n.h4,{id:"default-mapping",children:"Default Mapping"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Up button short press -> Brightness up"}),"\n",(0,r.jsxs)(n.li,{children:["Up button double press ",(0,r.jsx)(n.code,{children:"Virtual"})," -> Turn on"]}),"\n",(0,r.jsx)(n.li,{children:"Down button short press -> Brightness down"}),"\n",(0,r.jsxs)(n.li,{children:["Down button double press ",(0,r.jsx)(n.code,{children:"Virtual"})," -> Turn off"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mapping-2",children:"Mapping #2"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Up button short press -> Brightness up"}),"\n",(0,r.jsxs)(n.li,{children:["Up button double press ",(0,r.jsx)(n.code,{children:"Virtual"})," -> Color up"]}),"\n",(0,r.jsx)(n.li,{children:"Down button short press -> Brightness down"}),"\n",(0,r.jsxs)(n.li,{children:["Down button double press ",(0,r.jsx)(n.code,{children:"Virtual"})," -> Color down"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/blueprints/hooks/light",children:"Light Hook docs"})}),"\n",(0,r.jsx)(n.h3,{id:"media-player",children:"Media Player"}),"\n",(0,r.jsx)(n.p,{children:"This Hook blueprint allows to build a controller-based automation to control a media player. Supports volume setting, play/pause and track selection."}),"\n",(0,r.jsx)(n.h4,{id:"default-mapping-1",children:"Default Mapping"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Up button short press -> Volume up"}),"\n",(0,r.jsxs)(n.li,{children:["Up button double press ",(0,r.jsx)(n.code,{children:"Virtual"})," -> Next track"]}),"\n",(0,r.jsx)(n.li,{children:"Down button short press -> Volume down"}),"\n",(0,r.jsxs)(n.li,{children:["Down button double press ",(0,r.jsx)(n.code,{children:"Virtual"})," -> Play/Pause"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/blueprints/hooks/media_player",children:"Media Player Hook docs"})}),"\n",(0,r.jsx)(n.h3,{id:"cover",children:"Cover"}),"\n",(0,r.jsx)(n.p,{children:"This Hook blueprint allows to build a controller-based automation to control a cover. Supports opening, closing and tilting the cover."}),"\n",(0,r.jsx)(n.h4,{id:"default-mapping-2",children:"Default Mapping"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Up button short press -> Open cover"}),"\n",(0,r.jsx)(n.li,{children:"Down button short press -> Close cover"}),"\n",(0,r.jsxs)(n.li,{children:["Down button double press ",(0,r.jsx)(n.code,{children:"Virtual"})," -> Stop cover and cover tilt"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/blueprints/hooks/cover",children:"Cover Hook docs"})}),"\n",(0,r.jsx)(n.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,r.jsx)(n.h3,{id:"helper---last-controller-event",children:"Helper - Last Controller Event"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"helper_last_controller_event"})," (Helper - Last Controller Event) input serves as a permanent storage area for the automation. The stored info is used to implement the blueprint's core functionality. To learn more about the helper, how it's used and why it's required, you can read the dedicated section in the ",(0,r.jsx)(n.a,{href:"/docs/controllers-hooks-ecosystem#helper---last-controller-event-input",children:"Controllers-Hooks Ecosystem documentation"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"virtual-double-press-events",children:"Virtual double press events"}),"\n",(0,r.jsxs)(n.p,{children:["It's also important to note that the controller doesn't natively support double press events. Instead , this blueprint provides virtual double press events. You can read more about them in the ",(0,r.jsx)(n.a,{href:"/docs/controllers-hooks-ecosystem#virtual-events",children:"general Controllers-Hooks Ecosystem documentation"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"hooks-support-and-missing-long-press-events",children:"Hooks support and missing long press events"}),"\n",(0,r.jsx)(n.p,{children:"Due to the controller not exposing long press events but only short and release events, it's not possible to determine the nature of a button press. Therefore, to prevent an erroneous behaviour, Hooks only rely on short and virtual double press events to implement their functionality for this controller."}),"\n",(0,r.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"2021-10-29"}),": first blueprint version ","\ud83c\udf89"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"2022-08-08"}),": Optimize characters usage for the ",(0,r.jsx)(n.code,{children:"helper_last_controller_event"})," text input."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"2025-02-13"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["\u26a0\ufe0f"," ",(0,r.jsx)(n.strong,{children:"Breaking Change"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["Migrate to Zigbee2MQTT MQTT Device Triggers. (",(0,r.jsx)(n.a,{href:"https://github.com/yarafie",children:"@yarafie"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"controller_entity"})," input has been deprecated, and ",(0,r.jsx)(n.code,{children:"controller_device"})," is now mandatory.\nIf you are a Zigbee2MQTT user and plan to update this blueprint, please make sure to remove the ",(0,r.jsx)(n.code,{children:"controller_entity"})," input from your automation config and add the device ID of your controller to the ",(0,r.jsx)(n.code,{children:"controller_device"})," input.\nTo obtain the device ID from your controller, configure the automation from the UI and use the device selector dropdown on the ",(0,r.jsx)(n.code,{children:"controller_device"})," input to select your controller."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"2025-03-20"}),": Standardized input naming format for controller devices and virtual button actions. No functionality changes."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);