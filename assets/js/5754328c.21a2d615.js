"use strict";(self.webpackChunkawesome_ha_blueprints_website=self.webpackChunkawesome_ha_blueprints_website||[]).push([[6636],{6313:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"blueprints/controllers/philips_929002398602","title":"Controller - Philips 929002398602 Hue Dimmer switch v2","description":"Controller automation for executing any kind of action triggered by the provided Philips 929002398602 Hue Dimmer switch v2. Supports Zigbee2MQTT, ZHA.","source":"@site/docs/blueprints/controllers/philips_929002398602.mdx","sourceDirName":"blueprints/controllers","slug":"/blueprints/controllers/philips_929002398602","permalink":"/awesome-ha-blueprints/docs/blueprints/controllers/philips_929002398602","draft":false,"unlisted":false,"editUrl":"https://github.com/yarafie/awesome-ha-blueprints/edit/main/docs/blueprints/controllers/philips_929002398602.mdx","tags":[],"version":"current","frontMatter":{"title":"Controller - Philips 929002398602 Hue Dimmer switch v2","description":"Controller automation for executing any kind of action triggered by the provided Philips 929002398602 Hue Dimmer switch v2. Supports Zigbee2MQTT, ZHA."}}');var o=t(7557),s=t(7389),r=t(5561);const l={title:"Controller - Philips 929002398602 Hue Dimmer switch v2",description:"Controller automation for executing any kind of action triggered by the provided Philips 929002398602 Hue Dimmer switch v2. Supports Zigbee2MQTT, ZHA."},a=void 0,d={},h=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Available Hooks",id:"available-hooks",level:2},{value:"Light",id:"light",level:3},{value:"(Default) Mapping",id:"default-mapping",level:4},{value:"Media Player",id:"media-player",level:3},{value:"(Default) Mapping",id:"default-mapping-1",level:4},{value:"Additional Notes",id:"additional-notes",level:2},{value:"Virtual double press events",id:"virtual-double-press-events",level:3},{value:"Changelog",id:"changelog",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r._x,{id:"philips_929002398602",category:"controllers"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["This blueprint is part of the ",(0,o.jsx)(n.strong,{children:"Controllers-Hooks Ecosystem"}),". You can read more about this topic ",(0,o.jsx)(n.a,{href:"/docs/controllers-hooks-ecosystem",children:"here"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This blueprint provides universal support for running any custom action when a button is pressed on the provided Philips 929002398602 Hue Dimmer switch v2. Supports controllers integrated with Zigbee2MQTT, ZHA. The blueprint will automagically detect the integration type and take care of all the rest."}),"\n",(0,o.jsx)(n.p,{children:"In addition of being able to provide custom actions for every kind of button press supported by the remote, the blueprint allows to loop the long press actions while the corresponding button is being held. Once released, the loop stops. This is useful when holding down a button should result in a continuous action (such as lowering the volume of a media player, or controlling a light brightness)."}),"\n",(0,o.jsx)(n.p,{children:"The blueprint also adds support for virtual double button press events, which are not exposed by the controller device itself. However, It needs to be enabled in the blueprint."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Automations created with this blueprint can be connected with one or more ",(0,o.jsx)(n.a,{href:"/docs/blueprints/hooks",children:"Hooks"})," supported by this controller.\nHooks allow to easily create controller-based automations for interacting with lights, media players, covers and maybe more in the future. See the list of ",(0,o.jsx)(n.a,{href:"/docs/blueprints/controllers/philips_929002398602#available-hooks",children:"Hooks available for this controller"})," for additional details."]})}),"\n",(0,o.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,o.jsx)(r.Kg,{id:"zigbee2mqtt"}),"\n",(0,o.jsx)(r.Kg,{id:"zha"}),"\n",(0,o.jsx)(n.h2,{id:"inputs",children:"Inputs"}),"\n",(0,o.jsx)(r.G0,{category:"controllers",id:"philips_929002398602"}),"\n",(0,o.jsx)(n.h2,{id:"available-hooks",children:"Available Hooks"}),"\n",(0,o.jsx)(n.admonition,{title:"Virtual double press actions",type:"note",children:(0,o.jsx)(n.p,{children:"Some of the following mappings might include actions for virtual double press events, which are disabled by default.\nIf you are using a hook mapping which provides an action for a virtual double press event, please make sure to enable support for virtual double press on the corresponding buttons with the corresponding blueprint input."})}),"\n",(0,o.jsx)(n.h3,{id:"light",children:"Light"}),"\n",(0,o.jsx)(n.p,{children:"This Hook blueprint allows to build a controller-based automation to control a light. Supports brightness and color control both for white temperature and rgb lights."}),"\n",(0,o.jsx)(n.h4,{id:"default-mapping",children:"(Default) Mapping"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"On button short press -> Turn on"}),"\n",(0,o.jsx)(n.li,{children:"On button long press -> Color up (continuous, until release)"}),"\n",(0,o.jsx)(n.li,{children:"Off button short press -> Turn off"}),"\n",(0,o.jsx)(n.li,{children:"Off button long press -> Color down (continuous, until release)"}),"\n",(0,o.jsx)(n.li,{children:"Up button short press -> Brightness up"}),"\n",(0,o.jsx)(n.li,{children:"Up button long press -> Brightness up (continuous, until release)"}),"\n",(0,o.jsx)(n.li,{children:"Down button short press -> Brightness down"}),"\n",(0,o.jsx)(n.li,{children:"Down button long press -> Brightness down (continuous, until release)"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"/docs/blueprints/hooks/light",children:"Light Hook docs"})}),"\n",(0,o.jsx)(n.h3,{id:"media-player",children:"Media Player"}),"\n",(0,o.jsx)(n.p,{children:"This Hook blueprint allows to build a controller-based automation to control a media player. Supports volume setting, play/pause and track selection."}),"\n",(0,o.jsx)(n.h4,{id:"default-mapping-1",children:"(Default) Mapping"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"On button short press -> Play/Pause"}),"\n",(0,o.jsx)(n.li,{children:"On button long press -> Next track"}),"\n",(0,o.jsx)(n.li,{children:"Off button short press -> Stop"}),"\n",(0,o.jsx)(n.li,{children:"Off button long press -> Previous track"}),"\n",(0,o.jsx)(n.li,{children:"Up button short press -> Volume up"}),"\n",(0,o.jsx)(n.li,{children:"Up button long press -> Volume up (continuous, until release)"}),"\n",(0,o.jsx)(n.li,{children:"Down button short press -> Volume down"}),"\n",(0,o.jsx)(n.li,{children:"Down button long press -> Volume down (continuous, until release)"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"/docs/blueprints/hooks/media_player",children:"Media Player Hook docs"})}),"\n",(0,o.jsx)(n.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,o.jsx)(n.h3,{id:"virtual-double-press-events",children:"Virtual double press events"}),"\n",(0,o.jsxs)(n.p,{children:["It's important to note that the controller doesn't natively support double press events. Instead , this blueprint provides virtual double press events. You can read more about them in the ",(0,o.jsx)(n.a,{href:"/docs/controllers-hooks-ecosystem#virtual-events",children:"general Controllers-Hooks Ecosystem documentation"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"2021-11-21"}),": first blueprint version ","\ud83c\udf89"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"2022-07-22"}),": Fix short press actions not being triggered by quick button clicks."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"2022-08-08"}),": Optimize characters usage for the ",(0,o.jsx)(n.code,{children:"helper_last_controller_event"})," text input."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"2025-02-13"}),":"]}),"\n",(0,o.jsxs)(n.p,{children:["\u26a0\ufe0f"," ",(0,o.jsx)(n.strong,{children:"Breaking Change"}),":"]}),"\n",(0,o.jsxs)(n.p,{children:["Migrate to Zigbee2MQTT MQTT Device Triggers. (",(0,o.jsx)(n.a,{href:"https://github.com/yarafie",children:"@yarafie"}),")"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"controller_entity"})," input has been deprecated, and ",(0,o.jsx)(n.code,{children:"controller_device"})," is now mandatory.\nIf you are a Zigbee2MQTT user and plan to update this blueprint, please make sure to remove the ",(0,o.jsx)(n.code,{children:"controller_entity"})," input from your automation config and add the device ID of your controller to the ",(0,o.jsx)(n.code,{children:"controller_device"})," input.\nTo obtain the device ID from your controller, configure the automation from the UI and use the device selector dropdown on the ",(0,o.jsx)(n.code,{children:"controller_device"})," input to select your controller."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"2025-03-16"}),": Update blueprint with button optimizations. [Issue#713] (",(0,o.jsx)(n.a,{href:"https://github.com/yarafie",children:"@yarafie"}),") ","\ud83c\udf89"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"2025-03-20"}),": Standardized input naming format for controller devices and virtual button actions. No functionality changes."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);